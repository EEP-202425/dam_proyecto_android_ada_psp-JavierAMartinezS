package adapspand.proyfinal.ruta;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import adapspand.proyfinal.billete.Billete;

@RestController
@RequestMapping("/rutas")
public class RutaController {
	
	private final RutaRepository rutaRepository;
	
	private RutaController(RutaRepository rr) {
		this.rutaRepository = rr;
	}
	
	
	 @GetMapping
	    public ResponseEntity<Page<Ruta>> findAllByBillete(@RequestParam Long billeteId, Pageable pageable) {
	        // Primero obtenemos el billete con el ID proporcionado
	        Billete billete = new Billete();
	        billete.setId(billeteId); // Este es un ejemplo, deberías buscar el billete real en la base de datos

	        // Buscar las rutas asociadas a este billete. Usamos un Optional en caso de que no haya rutas.
	        Optional<Ruta> rutaOpt = rutaRepository.buscarPorBillete(billete);

	        // Si no se encuentra la ruta asociada al billete, devolvemos 404
	        if (rutaOpt.isEmpty()) {
	            return ResponseEntity.notFound().build();
	        }

	        // Si encontramos la ruta, la devolvemos en una página (puede contener solo un elemento)
	        Page<Ruta> rutaPage = rutaRepository.buscarPorBillete(billete, PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), pageable.getSort()));

	        return ResponseEntity.ok(rutaPage);
	    }
//	@GetMapping
//	private ResponseEntity<List<Ruta>> findAll(@RequestParam Billete billete) {
//		Optional<Ruta> rutaOpt = Optional.ofNullable(rutaRepository.buscarPorBillete(billete));
//		if (rutaOpt.isPresent()) {
//			return ResponseEntity.ok(rutaOpt.get());
//		} else {
//			return ResponseEntity.notFound().build();
//		}
//	}
}
