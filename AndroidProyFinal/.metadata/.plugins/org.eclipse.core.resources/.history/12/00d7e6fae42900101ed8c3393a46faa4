package adapspand.proyfinal.ruta;

import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import adapspand.proyfinal.billete.Billete;
import adapspand.proyfinal.billete.BilleteRepository;

@RestController
@RequestMapping("/rutas")
public class RutaController {
	
	private final RutaRepository rutaRepository;
	private final BilleteRepository billeteRepository;
	
	private RutaController(RutaRepository rr, BilleteRepository br) {
		this.rutaRepository = rr;
		this.billeteRepository = br;
	}
	
	
	@GetMapping
    public ResponseEntity<Page<Ruta>> findAllByBillete(@RequestParam Long billeteId, Pageable pageable) {
        // Buscar el billete en la base de datos por su ID
        Optional<Billete> billeteOpt = billeteRepository.findById(billeteId);

        // Si no se encuentra el billete, devolver un 404
        if (billeteOpt.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        // Si el billete existe, buscar las rutas asociadas a este billete
        Billete billete = billeteOpt.get();

        // Buscar las rutas asociadas al billete con paginaci√≥n
        Page<Ruta> rutasPage = rutaRepository.buscarPorBillete(billete, PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), pageable.getSort()));

        // Si no se encuentran rutas, devolver un 404
        if (rutasPage.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        // Devolver las rutas en una respuesta 200 OK
        return ResponseEntity.ok(rutasPage);
    }
//	@GetMapping
//	private ResponseEntity<List<Ruta>> findAll(@RequestParam Billete billete) {
//		Optional<Ruta> rutaOpt = Optional.ofNullable(rutaRepository.buscarPorBillete(billete));
//		if (rutaOpt.isPresent()) {
//			return ResponseEntity.ok(rutaOpt.get());
//		} else {
//			return ResponseEntity.notFound().build();
//		}
//	}
}
