package adapspand.proyfinal.ruta;

import java.net.URI;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import adapspand.proyfinal.billete.Billete;
import adapspand.proyfinal.billete.BilleteRepository;

@RestController
@RequestMapping("/rutas")
public class RutaController {

    private final RutaRepository rutaRepository;
    private final BilleteRepository billeteRepository;

    private RutaController(RutaRepository rutaRepository, BilleteRepository billeteRepository) { // Usa nombres de variables camelCase
        this.rutaRepository = rutaRepository;
        this.billeteRepository = billeteRepository;
    }

    @GetMapping
    public ResponseEntity<Ruta> getRutaByBilleteId(@RequestParam Long billeteId) { // Cambiado nombre del método para mayor claridad
        Optional<Billete> billeteOpt = billeteRepository.findById(billeteId);

        if (billeteOpt.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        Ruta ruta = rutaRepository.findByBillete(billeteOpt.get()); // Llama al método findByBillete
        return ResponseEntity.of(Optional.ofNullable(ruta)); // Simplificado el Optional
    }

    @PostMapping
    public ResponseEntity<Void> createRuta(
            @RequestBody Ruta nuevaRuta, UriComponentsBuilder ucb) {
        Ruta rutaDevuelta = rutaRepository.save(nuevaRuta); // Simplificado la creación de la ruta
        URI uriBuena = ucb.path("/rutas/{id}").buildAndExpand(rutaDevuelta.getId()).toUri();
        return ResponseEntity.created(uriBuena).build();
    }
}
