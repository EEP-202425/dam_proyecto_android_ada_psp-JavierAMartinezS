package adapspand.proyfinal.ruta;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import adapspand.proyfinal.billete.Billete;

@RestController
@RequestMapping("/rutas")
public class RutaController {
	
	private final RutaRepository rutaRepository;
	
	private RutaController(RutaRepository rr) {
		this.rutaRepository = rr;
	}
	
	
	@GetMapping
    public ResponseEntity<Page<Ruta>> findAllByBillete(@RequestParam Long billeteId, Pageable pageable) {
        // Aquí debes buscar el Billete por su ID
        Billete billete = new Billete();  // Este es un ejemplo, deberías buscar el billete real en la base de datos
        billete.setId(billeteId); // Esto es solo un ejemplo; deberías obtener el billete real

        // Buscar las rutas asociadas a este billete
        Page<Ruta> page = rutaRepository.buscarPorBillete(billete, pageable);

        // Si no se encuentran rutas asociadas al billete, devolver un 404
        if (page.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        // Devolver las rutas filtradas
        return ResponseEntity.ok(page);
    }
//	@GetMapping
//	private ResponseEntity<List<Ruta>> findAll(@RequestParam Billete billete) {
//		Optional<Ruta> rutaOpt = Optional.ofNullable(rutaRepository.buscarPorBillete(billete));
//		if (rutaOpt.isPresent()) {
//			return ResponseEntity.ok(rutaOpt.get());
//		} else {
//			return ResponseEntity.notFound().build();
//		}
//	}
}
